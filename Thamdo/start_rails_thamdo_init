#!/bin/bash



## Fill in name of program here.

PROG="start_rails_thamdo"

PROG_PATH="/home/su207/thamdo/" ## Not need, but sometimes helpful (if $PROG resides in /opt for example).

PROG_ARGS=""

PID_PATH="/home/su207/thamdo"



start() {

    if [ -e "$PID_PATH/$PROG.pid" ]; then

        ## Program is running, exit with error.

        echo "Error! $PROG is currently running! killing " 1>&2
		
		kill $(cat $PID_PATH/$PROG.pid)

        rm "$PID_PATH/$PROG.pid"
		
		sleep 15
		
		$PROG_PATH/$PROG $PROG_ARGS 2>&1 >/home/su207/Auto_start/log/$PROG &

        echo "$PROG started"

        touch "$PID_PATH/$PROG.pid"

    else

        ## Change from /home/su207/Auto_start/log/$PROG to something like /var/log/$PROG if you want to save output.

            $PROG_PATH/$PROG $PROG_ARGS 2>&1 >/home/su207/Auto_start/log/$PROG &

        echo "$PROG started"

        touch "$PID_PATH/$PROG.pid"
		
		sleep 15

    fi

}



stop() {

    if [ -e "$PID_PATH/$PROG.pid" ]; then

        ## Program is running, so stop it

        kill $(cat $PID_PATH/$PROG.pid)


        rm "$PID_PATH/$PROG.pid"


        echo "$PROG stopped"
		
		sleep 15

    else

        ## Program is not running, exit with error.

        echo "Error! $PROG not started!" 1>&2

        exit 1

    fi

}



## Check to see if we are running as root first.

## Found at http://www.cyberciti.biz/tips/shell-root-user-check-script.html

#if [ "$(id -u)" != "0" ]; then

#    echo "This script must be run as root" 1>&2

#    exit 1

#fi



case "$1" in

    start)

        start

        exit 0

    ;;

    stop)

        stop

        exit 0

    ;;

    reload|restart|force-reload)

        stop

        start

        exit 0

    ;;

    **)

        echo "Usage: $0 {start|stop|reload}" 1>&2

        exit 1

    ;;

esac
